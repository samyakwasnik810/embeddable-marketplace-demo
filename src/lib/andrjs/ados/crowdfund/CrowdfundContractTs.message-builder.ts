/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  Asset,
  AndrAddr,
  Uint128,
  Binary,
  Uint64,
  InstantiateMsg,
  CampaignConfig,
  Recipient,
  Tier,
  TierMetaData,
  TokenExtension,
  ExecuteMsg,
  Expiry,
  Milliseconds,
  Addr,
  ReplyOn,
  OwnershipMessage,
  PermissioningMessage,
  Permission,
  LocalPermission,
  PresaleTierOrder,
  SimpleTierOrder,
  Cw20ReceiveMsg,
  AMPPkt,
  AMPCtx,
  CrossChainHop,
  Coin,
  AMPMsg,
  AMPMsgConfig,
  IBCConfig,
  QueryMsg,
  OrderBy,
  ADOBaseVersionResponse,
  AppContractResponse,
  BlockHeightResponse,
  CampaignSummaryResponse,
  KernelAddressResponse,
  PublisherResponse,
  ContractOwnerResponse,
  ContractPotentialOwnerResponse,
  ArrayOfString,
  ArrayOfPermissionInfo,
  PermissionInfo,
  TierOrdersResponse,
  TiersResponse,
  TierResponseItem,
  TypeResponse,
  VersionResponse,
} from './CrowdfundContractTs.types';
import { CamelCasedProperties } from 'type-fest';
export abstract class CrowdfundContractTsExecuteMsgBuilder {
  static addTier = ({
    tier,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        add_tier: unknown;
      }
    >['add_tier']
  >): ExecuteMsg => {
    return {
      add_tier: {
        tier,
      } as const,
    };
  };
  static updateTier = ({
    tier,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_tier: unknown;
      }
    >['update_tier']
  >): ExecuteMsg => {
    return {
      update_tier: {
        tier,
      } as const,
    };
  };
  static removeTier = ({
    level,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        remove_tier: unknown;
      }
    >['remove_tier']
  >): ExecuteMsg => {
    return {
      remove_tier: {
        level,
      } as const,
    };
  };
  static startCampaign = ({
    endTime,
    presale,
    startTime,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        start_campaign: unknown;
      }
    >['start_campaign']
  >): ExecuteMsg => {
    return {
      start_campaign: {
        end_time: endTime,
        presale,
        start_time: startTime,
      } as const,
    };
  };
  static purchaseTiers = ({
    orders,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        purchase_tiers: unknown;
      }
    >['purchase_tiers']
  >): ExecuteMsg => {
    return {
      purchase_tiers: {
        orders,
      } as const,
    };
  };
  static receive = ({
    amount,
    msg,
    sender,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        receive: unknown;
      }
    >['receive']
  >): ExecuteMsg => {
    return {
      receive: {
        amount,
        msg,
        sender,
      } as const,
    };
  };
  static endCampaign = (): ExecuteMsg => {
    return {
      end_campaign: {} as const,
    };
  };
  static claim = (): ExecuteMsg => {
    return {
      claim: {} as const,
    };
  };
  static discardCampaign = (): ExecuteMsg => {
    return {
      discard_campaign: {} as const,
    };
  };
  static ampReceive = ({
    ctx,
    messages,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        amp_receive: unknown;
      }
    >['amp_receive']
  >): ExecuteMsg => {
    return {
      amp_receive: {
        ctx,
        messages,
      } as const,
    };
  };
  static ownership = (ownershipMessage: OwnershipMessage): ExecuteMsg => {
    return {
      ownership: ownershipMessage,
    };
  };
  static updateKernelAddress = ({
    address,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_kernel_address: unknown;
      }
    >['update_kernel_address']
  >): ExecuteMsg => {
    return {
      update_kernel_address: {
        address,
      } as const,
    };
  };
  static updateAppContract = ({
    address,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_app_contract: unknown;
      }
    >['update_app_contract']
  >): ExecuteMsg => {
    return {
      update_app_contract: {
        address,
      } as const,
    };
  };
  static permissioning = (
    permissioningMessage: PermissioningMessage,
  ): ExecuteMsg => {
    return {
      permissioning: permissioningMessage,
    };
  };
}
export abstract class CrowdfundContractTsQueryMsgBuilder {
  static campaignSummary = (): QueryMsg => {
    return {
      campaign_summary: {} as const,
    };
  };
  static tierOrders = ({
    limit,
    orderBy,
    orderer,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        tier_orders: unknown;
      }
    >['tier_orders']
  >): QueryMsg => {
    return {
      tier_orders: {
        limit,
        order_by: orderBy,
        orderer,
        start_after: startAfter,
      } as const,
    };
  };
  static tiers = ({
    limit,
    orderBy,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        tiers: unknown;
      }
    >['tiers']
  >): QueryMsg => {
    return {
      tiers: {
        limit,
        order_by: orderBy,
        start_after: startAfter,
      } as const,
    };
  };
  static owner = (): QueryMsg => {
    return {
      owner: {} as const,
    };
  };
  static ownershipRequest = (): QueryMsg => {
    return {
      ownership_request: {} as const,
    };
  };
  static type = (): QueryMsg => {
    return {
      type: {} as const,
    };
  };
  static kernelAddress = (): QueryMsg => {
    return {
      kernel_address: {} as const,
    };
  };
  static appContract = (): QueryMsg => {
    return {
      app_contract: {} as const,
    };
  };
  static originalPublisher = (): QueryMsg => {
    return {
      original_publisher: {} as const,
    };
  };
  static blockHeightUponCreation = (): QueryMsg => {
    return {
      block_height_upon_creation: {} as const,
    };
  };
  static version = (): QueryMsg => {
    return {
      version: {} as const,
    };
  };
  static aDOBaseVersion = (): QueryMsg => {
    return {
      a_d_o_base_version: {} as const,
    };
  };
  static permissions = ({
    actor,
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        permissions: unknown;
      }
    >['permissions']
  >): QueryMsg => {
    return {
      permissions: {
        actor,
        limit,
        start_after: startAfter,
      } as const,
    };
  };
  static permissionedActions = (): QueryMsg => {
    return {
      permissioned_actions: {} as const,
    };
  };
}
