/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  AndrAddr,
  InstantiateMsg,
  ExecuteMsg,
  Binary,
  Expiration,
  Timestamp,
  Uint64,
  Uint128,
  ReplyOn,
  OwnershipMessage,
  Expiry,
  Milliseconds,
  Addr,
  PermissioningMessage,
  Permission,
  LocalPermission,
  RatesMessage,
  Rate,
  LocalRateType,
  LocalRateValue,
  Decimal,
  TransferAgreement,
  Coin,
  MintMsg,
  TokenExtension,
  BatchSendMsg,
  AMPPkt,
  AMPCtx,
  CrossChainHop,
  AMPMsg,
  AMPMsgConfig,
  IBCConfig,
  LocalRate,
  Recipient,
  PercentRate,
  QueryMsg,
  ADOBaseVersionResponse,
  AllNftInfoResponse,
  OwnerOfResponse,
  Approval,
  NftInfoResponse,
  OperatorsResponse,
  AllRatesResponse,
  TokensResponse,
  AppContractResponse,
  ApprovalResponse,
  ApprovalsResponse,
  BlockHeightResponse,
  CollectionInfoAndExtensionResponse,
  IsArchivedResponse,
  KernelAddressResponse,
  MinterResponse,
  NumTokensResponse,
  PublisherResponse,
  ContractOwnerResponse,
  ContractPotentialOwnerResponse,
  ArrayOfString,
  ArrayOfPermissionInfo,
  PermissionInfo,
  NullableRate,
  NullableTransferAgreement,
  TypeResponse,
  VersionResponse,
} from './Cw721ContractTs.types';
import { CamelCasedProperties } from 'type-fest';
export abstract class Cw721ContractTsExecuteMsgBuilder {
  static mint = ({
    owner,
    tokenId,
    tokenUri,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        mint: unknown;
      }
    >['mint']
  >): ExecuteMsg => {
    return {
      mint: {
        owner,
        token_id: tokenId,
        token_uri: tokenUri,
      } as const,
    };
  };
  static transferNft = ({
    recipient,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        transfer_nft: unknown;
      }
    >['transfer_nft']
  >): ExecuteMsg => {
    return {
      transfer_nft: {
        recipient,
        token_id: tokenId,
      } as const,
    };
  };
  static sendNft = ({
    contract,
    msg,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        send_nft: unknown;
      }
    >['send_nft']
  >): ExecuteMsg => {
    return {
      send_nft: {
        contract,
        msg,
        token_id: tokenId,
      } as const,
    };
  };
  static approve = ({
    expires,
    spender,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        approve: unknown;
      }
    >['approve']
  >): ExecuteMsg => {
    return {
      approve: {
        expires,
        spender,
        token_id: tokenId,
      } as const,
    };
  };
  static revoke = ({
    spender,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        revoke: unknown;
      }
    >['revoke']
  >): ExecuteMsg => {
    return {
      revoke: {
        spender,
        token_id: tokenId,
      } as const,
    };
  };
  static approveAll = ({
    expires,
    operator,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        approve_all: unknown;
      }
    >['approve_all']
  >): ExecuteMsg => {
    return {
      approve_all: {
        expires,
        operator,
      } as const,
    };
  };
  static revokeAll = ({
    operator,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        revoke_all: unknown;
      }
    >['revoke_all']
  >): ExecuteMsg => {
    return {
      revoke_all: {
        operator,
      } as const,
    };
  };
  static burn = ({
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        burn: unknown;
      }
    >['burn']
  >): ExecuteMsg => {
    return {
      burn: {
        token_id: tokenId,
      } as const,
    };
  };
  static archive = ({
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        archive: unknown;
      }
    >['archive']
  >): ExecuteMsg => {
    return {
      archive: {
        token_id: tokenId,
      } as const,
    };
  };
  static transferAgreement = ({
    agreement,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        transfer_agreement: unknown;
      }
    >['transfer_agreement']
  >): ExecuteMsg => {
    return {
      transfer_agreement: {
        agreement,
        token_id: tokenId,
      } as const,
    };
  };
  static batchMint = ({
    tokens,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        batch_mint: unknown;
      }
    >['batch_mint']
  >): ExecuteMsg => {
    return {
      batch_mint: {
        tokens,
      } as const,
    };
  };
  static batchSend = ({
    batch,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        batch_send: unknown;
      }
    >['batch_send']
  >): ExecuteMsg => {
    return {
      batch_send: {
        batch,
      } as const,
    };
  };
  static ampReceive = ({
    ctx,
    messages,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        amp_receive: unknown;
      }
    >['amp_receive']
  >): ExecuteMsg => {
    return {
      amp_receive: {
        ctx,
        messages,
      } as const,
    };
  };
  static ownership = (ownershipMessage: OwnershipMessage): ExecuteMsg => {
    return {
      ownership: ownershipMessage,
    };
  };
  static updateKernelAddress = ({
    address,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_kernel_address: unknown;
      }
    >['update_kernel_address']
  >): ExecuteMsg => {
    return {
      update_kernel_address: {
        address,
      } as const,
    };
  };
  static updateAppContract = ({
    address,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_app_contract: unknown;
      }
    >['update_app_contract']
  >): ExecuteMsg => {
    return {
      update_app_contract: {
        address,
      } as const,
    };
  };
  static permissioning = (
    permissioningMessage: PermissioningMessage,
  ): ExecuteMsg => {
    return {
      permissioning: permissioningMessage,
    };
  };
  static rates = (ratesMessage: RatesMessage): ExecuteMsg => {
    return {
      rates: ratesMessage,
    };
  };
}
export abstract class Cw721ContractTsQueryMsgBuilder {
  static ownerOf = ({
    includeExpired,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        owner_of: unknown;
      }
    >['owner_of']
  >): QueryMsg => {
    return {
      owner_of: {
        include_expired: includeExpired,
        token_id: tokenId,
      } as const,
    };
  };
  static allOperators = ({
    includeExpired,
    limit,
    owner,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        all_operators: unknown;
      }
    >['all_operators']
  >): QueryMsg => {
    return {
      all_operators: {
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter,
      } as const,
    };
  };
  static numTokens = (): QueryMsg => {
    return {
      num_tokens: {} as const,
    };
  };
  static nftInfo = ({
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        nft_info: unknown;
      }
    >['nft_info']
  >): QueryMsg => {
    return {
      nft_info: {
        token_id: tokenId,
      } as const,
    };
  };
  static allNftInfo = ({
    includeExpired,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        all_nft_info: unknown;
      }
    >['all_nft_info']
  >): QueryMsg => {
    return {
      all_nft_info: {
        include_expired: includeExpired,
        token_id: tokenId,
      } as const,
    };
  };
  static tokens = ({
    limit,
    owner,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        tokens: unknown;
      }
    >['tokens']
  >): QueryMsg => {
    return {
      tokens: {
        limit,
        owner,
        start_after: startAfter,
      } as const,
    };
  };
  static allTokens = ({
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        all_tokens: unknown;
      }
    >['all_tokens']
  >): QueryMsg => {
    return {
      all_tokens: {
        limit,
        start_after: startAfter,
      } as const,
    };
  };
  static isArchived = ({
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        is_archived: unknown;
      }
    >['is_archived']
  >): QueryMsg => {
    return {
      is_archived: {
        token_id: tokenId,
      } as const,
    };
  };
  static transferAgreement = ({
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        transfer_agreement: unknown;
      }
    >['transfer_agreement']
  >): QueryMsg => {
    return {
      transfer_agreement: {
        token_id: tokenId,
      } as const,
    };
  };
  static contractInfo = (): QueryMsg => {
    return {
      contract_info: {} as const,
    };
  };
  static minter = (): QueryMsg => {
    return {
      minter: {} as const,
    };
  };
  static approval = ({
    includeExpired,
    spender,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        approval: unknown;
      }
    >['approval']
  >): QueryMsg => {
    return {
      approval: {
        include_expired: includeExpired,
        spender,
        token_id: tokenId,
      } as const,
    };
  };
  static approvals = ({
    includeExpired,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        approvals: unknown;
      }
    >['approvals']
  >): QueryMsg => {
    return {
      approvals: {
        include_expired: includeExpired,
        token_id: tokenId,
      } as const,
    };
  };
  static owner = (): QueryMsg => {
    return {
      owner: {} as const,
    };
  };
  static ownershipRequest = (): QueryMsg => {
    return {
      ownership_request: {} as const,
    };
  };
  static type = (): QueryMsg => {
    return {
      type: {} as const,
    };
  };
  static kernelAddress = (): QueryMsg => {
    return {
      kernel_address: {} as const,
    };
  };
  static appContract = (): QueryMsg => {
    return {
      app_contract: {} as const,
    };
  };
  static originalPublisher = (): QueryMsg => {
    return {
      original_publisher: {} as const,
    };
  };
  static blockHeightUponCreation = (): QueryMsg => {
    return {
      block_height_upon_creation: {} as const,
    };
  };
  static version = (): QueryMsg => {
    return {
      version: {} as const,
    };
  };
  static aDOBaseVersion = (): QueryMsg => {
    return {
      a_d_o_base_version: {} as const,
    };
  };
  static permissions = ({
    actor,
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        permissions: unknown;
      }
    >['permissions']
  >): QueryMsg => {
    return {
      permissions: {
        actor,
        limit,
        start_after: startAfter,
      } as const,
    };
  };
  static permissionedActions = (): QueryMsg => {
    return {
      permissioned_actions: {} as const,
    };
  };
  static rates = ({
    action,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        rates: unknown;
      }
    >['rates']
  >): QueryMsg => {
    return {
      rates: {
        action,
      } as const,
    };
  };
  static allRates = (): QueryMsg => {
    return {
      all_rates: {} as const,
    };
  };
}
